# Docker Compose Configuration for Secure Production Deployment
# Usage: docker-compose -f docker-compose.yml -f docker-compose.secure.yml up -d

version: '3.8'

services:
  # Central SSO Server with Security Enhancements
  central-sso:
    volumes:
      - ./ssl:/app/ssl:ro
      - ./logs/central-sso:/app/storage/logs
    environment:
      # SSL Configuration
      - SSL_VERIFY=true
      - SSL_CERT_PATH=/app/ssl
      - SSL_KEY_PATH=/app/ssl
      - SSL_CA_BUNDLE=/app/ssl/ca.pem
      
      # Security Settings
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=warning
      
      # Session Security
      - SESSION_SECURE_COOKIE=true
      - SESSION_HTTP_ONLY=true
      - SESSION_SAME_SITE=strict
      
      # Rate Limiting
      - RATE_LIMIT_PER_MINUTE=60
      - AUTH_RATE_LIMIT_PER_MINUTE=10
      - AUDIT_RATE_LIMIT_PER_MINUTE=100
      
      # Security Features
      - ENABLE_SECURITY_HEADERS=true
      - VERIFY_REQUEST_SIGNATURES=true
      - INTRUSION_DETECTION_ENABLED=true
      
    networks:
      - sso-network-secure
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8000/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Tenant 1 Application with Security Enhancements
  tenant1-app:
    volumes:
      - ./ssl:/app/ssl:ro
      - ./logs/tenant1:/app/storage/logs
    environment:
      # SSL Configuration
      - SSL_VERIFY=true
      - SSL_CERT_PATH=/app/ssl
      - SSL_KEY_PATH=/app/ssl
      - SSL_CA_BUNDLE=/app/ssl/ca.pem
      
      # SSO Configuration
      - CENTRAL_SSO_URL=https://central-sso:8000
      - CENTRAL_SSO_API=https://central-sso:8000/api
      
      # Security Settings
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=warning
      
      # Session Security
      - SESSION_SECURE_COOKIE=true
      - SESSION_HTTP_ONLY=true
      - SESSION_SAME_SITE=strict
      
    networks:
      - sso-network-secure
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Tenant 2 Application with Security Enhancements
  tenant2-app:
    volumes:
      - ./ssl:/app/ssl:ro
      - ./logs/tenant2:/app/storage/logs
    environment:
      # SSL Configuration
      - SSL_VERIFY=true
      - SSL_CERT_PATH=/app/ssl
      - SSL_KEY_PATH=/app/ssl
      - SSL_CA_BUNDLE=/app/ssl/ca.pem
      
      # SSO Configuration
      - CENTRAL_SSO_URL=https://central-sso:8000
      - CENTRAL_SSO_API=https://central-sso:8000/api
      
      # Security Settings
      - APP_ENV=production
      - APP_DEBUG=false
      - LOG_LEVEL=warning
      
      # Session Security
      - SESSION_SECURE_COOKIE=true
      - SESSION_HTTP_ONLY=true
      - SESSION_SAME_SITE=strict
      
    networks:
      - sso-network-secure
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/up"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Secure MariaDB Database
  mariadb:
    environment:
      # Enhanced Security
      - MYSQL_RANDOM_ROOT_PASSWORD=yes
      - MYSQL_ONETIME_PASSWORD=yes
    volumes:
      - ./ssl:/etc/mysql/ssl:ro
      - ../../../infrastructure/docker/config/mariadb-secure.cnf:/etc/mysql/conf.d/security.cnf:ro
      - ./logs/mariadb:/var/log/mysql
    networks:
      - sso-network-secure
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for Caching and Rate Limiting
  redis:
    image: redis:7-alpine
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    networks:
      - sso-network-secure
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy with SSL Termination
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./ssl:/etc/ssl/certs:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - central-sso
      - tenant1-app
      - tenant2-app
    networks:
      - sso-network-secure
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregation (ELK Stack Light)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - sso-network-secure
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - sso-network-secure
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - sso-network-secure
    restart: unless-stopped

  # Security Monitoring
  fail2ban:
    image: crazymax/fail2ban:latest
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./fail2ban:/data
      - ./logs:/var/log:ro
    restart: unless-stopped

  # Backup Service
  backup:
    image: alpine:latest
    volumes:
      - ./backups:/backups
      - ./ssl:/ssl:ro
      - mariadb_data:/data/mariadb:ro
    networks:
      - sso-network-secure
    restart: "no"
    command: |
      sh -c "
        apk add --no-cache mysql-client tar gzip
        echo '0 2 * * * /backup.sh' > /var/spool/cron/crontabs/root
        crond -f
      "

volumes:
  mariadb_data_secure:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  sso-network-secure:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      encrypted: "true"